// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChainInstore', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const emptyAddress = '0x0000000000000000000000000000000000000000'
    const contractOwnerID = accounts[0] // MWJ: New, for adding actors, but may become unused?
    // const ownerID = accounts[0]
    // const currItemOwnerID = accounts[0] // was ownerID. I believe this is best renamed to currItemOwnerID
    const currItemOwnerID = emptyAddress // was ownerID. I believe this is best renamed to currItemOwnerID
    const originGrowerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var retailerOrdered = 0
    var productID = 1000000*sku + 100*upc + retailerOrdered // sku000upc00 format /// ORIG -> sku + upc
    const productNotes = "Best beans for Espresso"
    // const productPrice = web3.utils.toWei("1", "ether") // truffle version 5, web3 1.0.x
    const productPrice = web3.toWei("1", "ether")
    var itemState = 0
    const processorID = accounts[2]
    const distributorID = accounts[3]
    const retailerID = accounts[4]
    const consumerID = accounts[5]

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Grower: accounts[1] ", accounts[1])
    console.log("Processor: accounts[2] ", accounts[2])
    console.log("Distributor: accounts[3] ", accounts[3])
    console.log("Retailer: accounts[4] ", accounts[4])
    console.log("Consumer: accounts[5] ", accounts[5])

    // 1st Test
    it("Testing smart contract function plantItem() that allows a GROWER to PLANT a crop", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Add Roles via their addresses
        // THIS IS NOW DONE IN THE FUNCTIONS ON THE BLOCKCHAIN
        // await supplyChain.addGrower(originGrowerID, {from: contractOwnerID})
        // await supplyChain.addProcessor(processorID, {from: contractOwnerID})
        // await supplyChain.addDistributor(distributorID, {from: contractOwnerID})
        // await supplyChain.addRetailer(retailerID, {from: contractOwnerID})
        // await supplyChain.addConsumer(consumerID, {from: contractOwnerID})

        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Harvested()
        var event = supplyChain.Planted()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Planted by calling function plantItem()
        // await supplyChain.plantItem(upc, originGrowerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {from: originGrowerID})
        await supplyChain.plantItem(upc, originGrowerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set, BUFFER ONE
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originGrowerID, 'Error: Missing or Invalid currItemOwnerID')
        assert.equal(resultBufferOne[3], originGrowerID, 'Error: Missing or Invalid originGrowerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferOne[8], emptyAddress, 'Error: Invalid item processorID')

        // Verify the result set, BUFFER TWO
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid item productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid item productNotes')
        assert.equal(resultBufferTwo[4], 0, 'Error: Invalid item productPrice')
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], emptyAddress, 'Error: Invalid item distributorID')
        assert.equal(resultBufferTwo[7], emptyAddress, 'Error: Invalid item retailerID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Invalid item consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function growItem() that allows a GROWER to GROW a crop", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Harvested()
        var event = supplyChain.Grown()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.growItem(upc, {from: originGrowerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set, BUFFER ONE
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originGrowerID, 'Error: Missing or Invalid currItemOwnerID')
        assert.equal(resultBufferOne[3], originGrowerID, 'Error: Missing or Invalid originGrowerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferOne[8], emptyAddress, 'Error: Invalid item processorID')

        // Verify the result set, BUFFER TWO
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid item productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid item productNotes')
        assert.equal(resultBufferTwo[4], 0, 'Error: Invalid item productPrice')
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], emptyAddress, 'Error: Invalid item distributorID')
        assert.equal(resultBufferTwo[7], emptyAddress, 'Error: Invalid item retailerID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Invalid item consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 3rd Test
    it("Testing smart contract function harvestItem() that allows a GROWER to HARVEST a crop", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Harvested()
        var event = supplyChain.Harvested()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(upc, {from: originGrowerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set, BUFFER ONE
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originGrowerID, 'Error: Missing or Invalid currItemOwnerID')
        assert.equal(resultBufferOne[3], originGrowerID, 'Error: Missing or Invalid originGrowerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferOne[8], emptyAddress, 'Error: Invalid item processorID')

        // Verify the result set, BUFFER TWO
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid item productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid item productNotes')
        assert.equal(resultBufferTwo[4], 0, 'Error: Invalid item productPrice')
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], emptyAddress, 'Error: Invalid item distributorID')
        assert.equal(resultBufferTwo[7], emptyAddress, 'Error: Invalid item retailerID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Invalid item consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 4th Test
    it("Testing smart contract function collectItem() that allows a PROCESSOR to COLLECT a crop", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Processed()
        var event = supplyChain.Collected()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Processed by calling function processtItem()
        // await supplyChain.collectItem(upc, {from: processorID})
        await supplyChain.collectItem(upc, processorID)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set, BUFFER ONE
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], processorID, 'Error: Missing or Invalid currItemOwnerID')
        assert.equal(resultBufferOne[3], originGrowerID, 'Error: Missing or Invalid originGrowerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferOne[8], processorID, 'Error: Invalid item processorID')

        // Verify the result set, BUFFER TWO
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid item productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid item productNotes')
        assert.equal(resultBufferTwo[4], 0, 'Error: Invalid item productPrice')
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], emptyAddress, 'Error: Invalid item distributorID')
        assert.equal(resultBufferTwo[7], emptyAddress, 'Error: Invalid item retailerID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Invalid item consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 5th Test
    it("Testing smart contract function processItem() that allows a PROCESSOR to PROCESS a crop", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Processed()
        var event = supplyChain.Processed()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Processed by calling function processtItem()
        await supplyChain.processItem(upc, {from: processorID})
            
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set, BUFFER ONE
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], processorID, 'Error: Missing or Invalid currItemOwnerID')
        assert.equal(resultBufferOne[3], originGrowerID, 'Error: Missing or Invalid originGrowerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferOne[8], processorID, 'Error: Invalid item processorID')

        // Verify the result set, BUFFER TWO
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid item productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid item productNotes')
        assert.equal(resultBufferTwo[4], 0, 'Error: Invalid item productPrice')
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], emptyAddress, 'Error: Invalid item distributorID')
        assert.equal(resultBufferTwo[7], emptyAddress, 'Error: Invalid item retailerID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Invalid item consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 6th Test
    it("Testing smart contract function packItem() that allows a PROCESSOR to PACK a crop", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Packed()
        var event = supplyChain.Packed()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Packed by calling function packItem()
        await supplyChain.packItem(upc, {from: processorID})
            
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set, BUFFER ONE
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], processorID, 'Error: Missing or Invalid currItemOwnerID')
        assert.equal(resultBufferOne[3], originGrowerID, 'Error: Missing or Invalid originGrowerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferOne[8], processorID, 'Error: Invalid item processorID')

        // Verify the result set, BUFFER TWO
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid item productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid item productNotes')
        assert.equal(resultBufferTwo[4], 0, 'Error: Invalid item productPrice')
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], emptyAddress, 'Error: Invalid item distributorID')
        assert.equal(resultBufferTwo[7], emptyAddress, 'Error: Invalid item retailerID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Invalid item consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 7th Test
    it("Testing smart contract function sellItem() that allows a PROCESSOR to SELL a crop", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event ForSale()
        var event = supplyChain.ForSale()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as ForSale by calling function sellItem()
        // await supplyChain.sellItem(upc, 1000000000000000000, {from: processorID}) // 1 ETH
        await supplyChain.sellItem(upc, 1000000000000000000, {from: processorID}) // Try smaller?

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set, BUFFER ONE
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], processorID, 'Error: Missing or Invalid currItemOwnerID')
        assert.equal(resultBufferOne[3], originGrowerID, 'Error: Missing or Invalid originGrowerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferOne[8], processorID, 'Error: Invalid item processorID')

        // Verify the result set, BUFFER TWO
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid item productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid item productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item productPrice')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], emptyAddress, 'Error: Invalid item distributorID')
        assert.equal(resultBufferTwo[7], emptyAddress, 'Error: Invalid item retailerID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Invalid item consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 8th Test
    it("Testing smart contract function retailerOrdered() that allows a RETAILER to ORDER a crop", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Sold()
        var event = supplyChain.RetailerOrdered()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Sold by calling function buyItem()
        // await supplyChain.retailerOrder(upc, {from: retailerID})
        await supplyChain.retailerOrder(upc, retailerID)
        // Update retailerOrdered and therefore productID with ordered status
        retailerOrdered = 1

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set, BUFFER ONE
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], processorID, 'Error: Missing or Invalid currItemOwnerID')
        assert.equal(resultBufferOne[3], originGrowerID, 'Error: Missing or Invalid originGrowerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferOne[8], processorID, 'Error: Invalid item processorID')

        // Verify the result set, BUFFER TWO
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid item productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid item productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item productPrice')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], emptyAddress, 'Error: Invalid item distributorID')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid item retailerID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Invalid item consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })

    // 9th Test
    it("Testing smart contract function buyItem() that allows a DISTRIBUTOR to BUY a crop", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Sold()
        var event = supplyChain.Sold()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Sold by calling function buyItem()
        // await supplyChain.buyItem(upc, {from: distributorID, value: 4000000000000000000})
        await supplyChain.buyItem(upc, distributorID, {value: 4000000000000000000})
            
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set, BUFFER ONE
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid currItemOwnerID')
        assert.equal(resultBufferOne[3], originGrowerID, 'Error: Missing or Invalid originGrowerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferOne[8], processorID, 'Error: Invalid item processorID')

        // Verify the result set, BUFFER TWO
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid item productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid item productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item productPrice')
        assert.equal(resultBufferTwo[5], 8, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid item distributorID')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid item retailerID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Invalid item consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 10th Test
    // it("Testing smart contract function shipItem() that allows a distributor to ship a crop", async() => {
    // Starter Code COFFEE: Sequence Diagram shows once the Distributor buyItem() completes, the FARMER and NOT the Distributor
    // is the one that executes the shipItem() function
    // it("Testing smart contract function shipItem() that allows a FARMER to ship coffee", async() => {
    // WALMART UML DIAGRAMS: It is the PROCESSOR who does the shipping once an item has been purchased by the DISTRIBUTOR
    it("Testing smart contract function shipItem() that allows a PROCESSOR to SHIP a crop", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Shipped()
        var event = supplyChain.Shipped()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Shipped by calling function shipItem()
        await supplyChain.shipItem(upc, {from: processorID}) // MUST BE {from: originGrowerID} not distributorID
            
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set, BUFFER ONE
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid currItemOwnerID')
        assert.equal(resultBufferOne[3], originGrowerID, 'Error: Missing or Invalid originGrowerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferOne[8], processorID, 'Error: Invalid item processorID')

        // Verify the result set, BUFFER TWO
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid item productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid item productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item productPrice')
        assert.equal(resultBufferTwo[5], 9, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid item distributorID')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid item retailerID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Invalid item consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 11th Test
    it("Testing smart contract function receiveItem() that allows a RETAILER to mark a crop RECEIVED", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Received()
        var event = supplyChain.Received()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Received by calling function receiveItem()
        await supplyChain.receiveItem(upc, {from: retailerID})
            
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set, BUFFER ONE
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid currItemOwnerID')
        assert.equal(resultBufferOne[3], originGrowerID, 'Error: Missing or Invalid originGrowerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferOne[8], processorID, 'Error: Invalid item processorID')

        // Verify the result set, BUFFER TWO
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid item productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid item productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item productPrice')
        assert.equal(resultBufferTwo[5], 10, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid item distributorID')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid item retailerID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Invalid item consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 12th Test
    it("Testing smart contract function shelfStockItem() that allows a RETAILER to mark a crop IN STOCK / ON-THE-SHELF", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Received()
        var event = supplyChain.ShelvesStocked()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Received by calling function receiveItem()
        await supplyChain.shelfStockItem(upc, {from: retailerID})
            
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set, BUFFER ONE
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid currItemOwnerID')
        assert.equal(resultBufferOne[3], originGrowerID, 'Error: Missing or Invalid originGrowerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferOne[8], processorID, 'Error: Invalid item processorID')

        // Verify the result set, BUFFER TWO
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid item productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid item productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item productPrice')
        assert.equal(resultBufferTwo[5], 11, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid item distributorID')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid item retailerID')
        assert.equal(resultBufferTwo[8], emptyAddress, 'Error: Invalid item consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    /************ HOLD OFF TESTING THIS - WHILE TESTING ONLINE PURCHASE  ************/
    // 13th Test
    it("Testing smart contract function purchaseInstoreItem() that allows a CONSUMER to PURCHASE an item INSTORE", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Purchased()
        var event = supplyChain.PurchasedInstore()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Purchased by calling function purchaseItem()
        // Commented line does work IF ConsumerRole.sol is updated per
        // notes in that file for addConsumer
        // await supplyChain.purchaseInstoreItem(upc, {from: consumerID})
        await supplyChain.purchaseInstoreItem(upc, consumerID) // From contract owner 1st time

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set, BUFFER ONE
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid currItemOwnerID')
        assert.equal(resultBufferOne[3], originGrowerID, 'Error: Missing or Invalid originGrowerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferOne[8], processorID, 'Error: Invalid item processorID')

        // Verify the result set, BUFFER TWO
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid item productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid item productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item productPrice')
        assert.equal(resultBufferTwo[5], 12, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid item distributorID')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid item retailerID')
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid item consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    
    /************ HOLD OFF TESTING THIS - WHILE TESTING ONLINE PURCHASE  ************/

    /************ HOLD OFF TESTING THESE - WHILE TESTING INSTORE PURCHASE  **********
    // 14th Test
    it("Testing smart contract function purchaseOnlineItem() that allows a CONSUMER to PURCHASE an item ONLINE", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Purchased()
        var event = supplyChain.PurchasedOnline()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Purchased by calling function purchaseItem()
        // Commented line does work IF ConsumerRole.sol is updated per
        // notes in that file for addConsumer
        // await supplyChain.purchaseOnlineItem(upc, {from: consumerID})
        await supplyChain.purchaseOnlineItem(upc, consumerID) // From contract owner 1st time

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set, BUFFER ONE
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid currItemOwnerID')
        assert.equal(resultBufferOne[3], originGrowerID, 'Error: Missing or Invalid originGrowerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferOne[8], processorID, 'Error: Invalid item processorID')

        // Verify the result set, BUFFER TWO
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid item productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid item productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item productPrice')
        assert.equal(resultBufferTwo[5], 13, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid item distributorID')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid item retailerID')
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid item consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 15th Test
    it("Testing smart contract function consumerReceived() that allows a CONSUMER to mark an item RECEIVED", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Purchased()
        var event = supplyChain.ConsumerReceived()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Purchased by calling function purchaseItem()
        await supplyChain.consumerReceivedItem(upc, {from: consumerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set, BUFFER ONE
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid currItemOwnerID')
        assert.equal(resultBufferOne[3], originGrowerID, 'Error: Missing or Invalid originGrowerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferOne[8], processorID, 'Error: Invalid item processorID')

        // Verify the result set, BUFFER TWO
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid item productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid item productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item productPrice')
        assert.equal(resultBufferTwo[5], 14, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid item distributorID')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid item retailerID')
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid item consumerID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    
    ************ HOLD OFF TESTING THIS - WHILE TESTING INSTORE PURCHASE  ************/

    // 16th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        // const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set, BUFFER ONE
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid currItemOwnerID')
        assert.equal(resultBufferOne[3], originGrowerID, 'Error: Missing or Invalid originGrowerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferOne[8], processorID, 'Error: Invalid item processorID')
    })

    // 17th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        // const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)
        
        // Verify the result set, BUFFER TWO
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid item productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid item productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item productPrice')
        assert.equal(resultBufferTwo[5], 12, 'Error: Invalid itemState')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid item distributorID')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid item retailerID')
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid item consumerID')
    })

});

